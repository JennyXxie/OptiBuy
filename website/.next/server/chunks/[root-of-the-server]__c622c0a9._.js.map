{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/scrapers.ts"],"sourcesContent":["import axios from 'axios'\nimport * as cheerio from 'cheerio'\n\ninterface ScrapedProduct {\n  name: string\n  price: number\n  image: string\n  url: string\n  rating?: number\n  reviews?: number\n  platform: string\n}\n\nexport class WebScraper {\n  private static readonly USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n\n  private static async fetchPage(url: string): Promise<string> {\n    try {\n      const response = await axios.get(url, {\n        headers: {\n          'User-Agent': this.USER_AGENT,\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n          'Accept-Language': 'en-US,en;q=0.5',\n          'Accept-Encoding': 'gzip, deflate',\n          'Connection': 'keep-alive',\n        },\n        timeout: 10000,\n      })\n      return response.data\n    } catch (error) {\n      console.error(`Error fetching ${url}:`, error)\n      throw error\n    }\n  }\n\n  static async scrapeTemu(query: string): Promise<ScrapedProduct[]> {\n    try {\n      const searchUrl = `https://www.temu.com/search_result.html?search_key=${encodeURIComponent(query)}`\n      const html = await this.fetchPage(searchUrl)\n      const $ = cheerio.load(html)\n      \n      const products: ScrapedProduct[] = []\n      \n      $('[data-testid=\"product-item\"], .product-item, .search-result-item').each((index, element) => {\n        if (products.length >= 10) return false // Limit to 10 products\n        \n        const name = $(element).find('[data-testid=\"product-title\"], .product-title, .title').first().text().trim()\n        const priceText = $(element).find('[data-testid=\"price\"], .price, .current-price').first().text().trim()\n        const image = $(element).find('img').first().attr('src') || ''\n        const url = $(element).find('a').first().attr('href') || ''\n        const rating = parseFloat($(element).find('[data-testid=\"rating\"], .rating').first().text()) || undefined\n        const reviews = parseInt($(element).find('[data-testid=\"reviews\"], .reviews').first().text().replace(/[^\\d]/g, '')) || undefined\n\n        if (name && priceText) {\n          const price = parseFloat(priceText.replace(/[^\\d.]/g, ''))\n          if (!isNaN(price)) {\n            products.push({\n              name,\n              price,\n              image: image.startsWith('http') ? image : `https:${image}`,\n              url: url.startsWith('http') ? url : `https://www.temu.com${url}`,\n              rating,\n              reviews,\n              platform: 'temu'\n            })\n          }\n        }\n      })\n\n      return products\n    } catch (error) {\n      console.error('Temu scraping error:', error)\n      return []\n    }\n  }\n\n  static async scrapeEbay(query: string): Promise<ScrapedProduct[]> {\n    try {\n      const searchUrl = `https://www.ebay.com/sch/i.html?_nkw=${encodeURIComponent(query)}&_sop=15`\n      const html = await this.fetchPage(searchUrl)\n      const $ = cheerio.load(html)\n      \n      const products: ScrapedProduct[] = []\n      \n      $('.s-item').each((index, element) => {\n        if (products.length >= 10) return false // Limit to 10 products\n        \n        const name = $(element).find('.s-item__title').text().trim()\n        const priceText = $(element).find('.s-item__price').text().trim()\n        const image = $(element).find('.s-item__image img').attr('src') || ''\n        const url = $(element).find('.s-item__link').attr('href') || ''\n        const rating = parseFloat($(element).find('.s-item__reviews .clipped').text()) || undefined\n        const reviews = parseInt($(element).find('.s-item__reviews .s-item__review-count').text().replace(/[^\\d]/g, '')) || undefined\n\n        if (name && priceText && !name.includes('Shop on eBay')) {\n          const price = parseFloat(priceText.replace(/[^\\d.]/g, ''))\n          if (!isNaN(price)) {\n            products.push({\n              name,\n              price,\n              image,\n              url,\n              rating,\n              reviews,\n              platform: 'ebay'\n            })\n          }\n        }\n      })\n\n      return products\n    } catch (error) {\n      console.error('eBay scraping error:', error)\n      return []\n    }\n  }\n\n  static async scrapeWalmart(query: string): Promise<ScrapedProduct[]> {\n    try {\n      const searchUrl = `https://www.walmart.com/search?q=${encodeURIComponent(query)}`\n      const html = await this.fetchPage(searchUrl)\n      const $ = cheerio.load(html)\n      \n      const products: ScrapedProduct[] = []\n      \n      $('[data-testid=\"item-stack\"], .search-result-gridview-item').each((index, element) => {\n        if (products.length >= 10) return false // Limit to 10 products\n        \n        const name = $(element).find('[data-testid=\"item-stack-title\"], .search-result-product-title').text().trim()\n        const priceText = $(element).find('[data-testid=\"item-stack-price\"], .price-main').text().trim()\n        const image = $(element).find('img').first().attr('src') || ''\n        const url = $(element).find('a').first().attr('href') || ''\n        const rating = parseFloat($(element).find('[data-testid=\"item-stack-rating\"], .stars').attr('aria-label')?.replace(/[^\\d.]/g, '')) || undefined\n        const reviews = parseInt($(element).find('[data-testid=\"item-stack-reviews\"], .reviews-count').text().replace(/[^\\d]/g, '')) || undefined\n\n        if (name && priceText) {\n          const price = parseFloat(priceText.replace(/[^\\d.]/g, ''))\n          if (!isNaN(price)) {\n            products.push({\n              name,\n              price,\n              image,\n              url: url.startsWith('http') ? url : `https://www.walmart.com${url}`,\n              rating,\n              reviews,\n              platform: 'walmart'\n            })\n          }\n        }\n      })\n\n      return products\n    } catch (error) {\n      console.error('Walmart scraping error:', error)\n      return []\n    }\n  }\n\n  static async scrapeAll(query: string): Promise<ScrapedProduct[]> {\n    try {\n      const [temuResults, ebayResults, walmartResults] = await Promise.allSettled([\n        this.scrapeTemu(query),\n        this.scrapeEbay(query),\n        this.scrapeWalmart(query)\n      ])\n\n      const allProducts: ScrapedProduct[] = []\n      \n      if (temuResults.status === 'fulfilled') {\n        allProducts.push(...temuResults.value)\n      }\n      if (ebayResults.status === 'fulfilled') {\n        allProducts.push(...ebayResults.value)\n      }\n      if (walmartResults.status === 'fulfilled') {\n        allProducts.push(...walmartResults.value)\n      }\n\n      return allProducts\n    } catch (error) {\n      console.error('Error scraping all platforms:', error)\n      return []\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/serpapi.ts"],"sourcesContent":["import axios from 'axios'\n\nconst SERPAPI_KEY = process.env.SERPAPI_KEY\n\nif (!SERPAPI_KEY) {\n  console.warn('⚠️ Missing SERPAPI_KEY in environment variables')\n}\n\nexport interface SerpApiProduct {\n  title: string\n  price: string\n  extracted_price: number\n  link: string\n  source: string\n  rating?: number\n  reviews?: number\n  thumbnail?: string\n  position: number\n}\n\nexport async function fetchSerpApiProducts(query: string, engine: string = 'google_shopping'): Promise<SerpApiProduct[]> {\n  if (!SERPAPI_KEY) {\n    console.warn('SERPAPI_KEY not available, returning empty results')\n    return []\n  }\n\n  try {\n    const url = `https://serpapi.com/search.json?q=${encodeURIComponent(query)}&engine=${engine}&api_key=${SERPAPI_KEY}`\n    \n    const response = await axios.get(url, {\n      timeout: 10000,\n    })\n\n    const results = response.data.shopping_results || response.data.organic_results || []\n    \n    return results.map((item: any) => ({\n      title: item.title || '',\n      price: item.price || '',\n      extracted_price: item.extracted_price || 0,\n      link: item.link || item.product_link || '',\n      source: item.source || 'Unknown',\n      rating: item.rating || undefined,\n      reviews: item.reviews || undefined,\n      thumbnail: item.thumbnail || '',\n      position: item.position || 0\n    }))\n  } catch (error) {\n    console.error('SerpAPI error:', error)\n    return []\n  }\n}\n\nexport async function fetchAmazonProducts(query: string): Promise<SerpApiProduct[]> {\n  return fetchSerpApiProducts(query, 'amazon')\n}\n\nexport async function fetchGoogleShoppingProducts(query: string): Promise<SerpApiProduct[]> {\n  return fetchSerpApiProducts(query, 'google_shopping')\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,QAAQ,IAAI,CAAC;AACf;AAcO,eAAe,qBAAqB,KAAa,EAAE,SAAiB,iBAAiB;IAC1F,IAAI,CAAC,aAAa;QAChB,QAAQ,IAAI,CAAC;QACb,OAAO,EAAE;IACX;IAEA,IAAI;QACF,MAAM,MAAM,CAAC,kCAAkC,EAAE,mBAAmB,OAAO,QAAQ,EAAE,OAAO,SAAS,EAAE,aAAa;QAEpH,MAAM,WAAW,MAAM,mLAAK,CAAC,GAAG,CAAC,KAAK;YACpC,SAAS;QACX;QAEA,MAAM,UAAU,SAAS,IAAI,CAAC,gBAAgB,IAAI,SAAS,IAAI,CAAC,eAAe,IAAI,EAAE;QAErF,OAAO,QAAQ,GAAG,CAAC,CAAC,OAAc,CAAC;gBACjC,OAAO,KAAK,KAAK,IAAI;gBACrB,OAAO,KAAK,KAAK,IAAI;gBACrB,iBAAiB,KAAK,eAAe,IAAI;gBACzC,MAAM,KAAK,IAAI,IAAI,KAAK,YAAY,IAAI;gBACxC,QAAQ,KAAK,MAAM,IAAI;gBACvB,QAAQ,KAAK,MAAM,IAAI;gBACvB,SAAS,KAAK,OAAO,IAAI;gBACzB,WAAW,KAAK,SAAS,IAAI;gBAC7B,UAAU,KAAK,QAAQ,IAAI;YAC7B,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,EAAE;IACX;AACF;AAEO,eAAe,oBAAoB,KAAa;IACrD,OAAO,qBAAqB,OAAO;AACrC;AAEO,eAAe,4BAA4B,KAAa;IAC7D,OAAO,qBAAqB,OAAO;AACrC","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/product-service.ts"],"sourcesContent":["import { WebScraper } from './scrapers'\nimport { fetchSerpApiProducts, SerpApiProduct } from './serpapi'\nimport { prisma } from './prisma'\n\nexport interface UnifiedProduct {\n  id?: string\n  name: string\n  price: number\n  image: string\n  url: string\n  platform: string\n  rating?: number\n  reviews?: number\n  currency: string\n  inStock: boolean\n  source: 'scraper' | 'serpapi' | 'database'\n}\n\nexport class ProductService {\n  static async searchProducts(query: string, useCache: boolean = true): Promise<UnifiedProduct[]> {\n    try {\n      // Check cache first if enabled\n      if (useCache) {\n        const cachedProducts = await this.getCachedProducts(query)\n        if (cachedProducts.length > 0) {\n          console.log(`Cache hit for query: ${query}`)\n          return cachedProducts\n        }\n      }\n\n      // Fetch from multiple sources\n      const [serpApiResults, scraperResults] = await Promise.allSettled([\n        this.fetchFromSerpApi(query),\n        this.fetchFromScrapers(query)\n      ])\n\n      const allProducts: UnifiedProduct[] = []\n\n      // Process SerpAPI results\n      if (serpApiResults.status === 'fulfilled') {\n        allProducts.push(...serpApiResults.value)\n      }\n\n      // Process scraper results\n      if (scraperResults.status === 'fulfilled') {\n        allProducts.push(...scraperResults.value)\n      }\n\n      // Remove duplicates and sort by price\n      const uniqueProducts = this.deduplicateProducts(allProducts)\n      const sortedProducts = uniqueProducts.sort((a, b) => a.price - b.price)\n\n      // Cache results if enabled\n      if (useCache && sortedProducts.length > 0) {\n        await this.cacheProducts(query, sortedProducts)\n      }\n\n      // Save to database\n      await this.saveProductsToDatabase(sortedProducts)\n\n      return sortedProducts.slice(0, 20) // Limit to 20 products\n    } catch (error) {\n      console.error('Product search error:', error)\n      return []\n    }\n  }\n\n  private static async fetchFromSerpApi(query: string): Promise<UnifiedProduct[]> {\n    try {\n      const serpResults = await fetchSerpApiProducts(query)\n      return serpResults.map((product: SerpApiProduct) => ({\n        name: product.title,\n        price: product.extracted_price,\n        image: product.thumbnail || '',\n        url: product.link,\n        platform: product.source.toLowerCase(),\n        rating: product.rating,\n        reviews: product.reviews,\n        currency: 'USD',\n        inStock: true,\n        source: 'serpapi' as const\n      }))\n    } catch (error) {\n      console.error('SerpAPI fetch error:', error)\n      return []\n    }\n  }\n\n  private static async fetchFromScrapers(query: string): Promise<UnifiedProduct[]> {\n    try {\n      const scraperResults = await WebScraper.scrapeAll(query)\n      return scraperResults.map(product => ({\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        url: product.url,\n        platform: product.platform,\n        rating: product.rating,\n        reviews: product.reviews,\n        currency: 'USD',\n        inStock: true,\n        source: 'scraper' as const\n      }))\n    } catch (error) {\n      console.error('Scraper fetch error:', error)\n      return []\n    }\n  }\n\n  private static deduplicateProducts(products: UnifiedProduct[]): UnifiedProduct[] {\n    const seen = new Set<string>()\n    return products.filter(product => {\n      const key = `${product.name.toLowerCase()}-${product.platform}`\n      if (seen.has(key)) {\n        return false\n      }\n      seen.add(key)\n      return true\n    })\n  }\n\n  private static async getCachedProducts(query: string): Promise<UnifiedProduct[]> {\n    try {\n      const cached = await prisma.product.findMany({\n        where: {\n          OR: [\n            { name: { contains: query } },\n            { description: { contains: query } }\n          ]\n        },\n        include: {\n          prices: {\n            orderBy: { createdAt: 'desc' },\n            take: 1\n          }\n        },\n        take: 20\n      })\n\n      return cached.map(product => ({\n        id: product.id,\n        name: product.name,\n        price: product.prices[0]?.price || 0,\n        image: product.imageUrl || '',\n        url: product.prices[0]?.url || '',\n        platform: product.prices[0]?.platform || 'unknown',\n        currency: 'USD',\n        inStock: product.prices[0]?.inStock || true,\n        source: 'database' as const\n      }))\n    } catch (error) {\n      console.error('Cache retrieval error:', error)\n      return []\n    }\n  }\n\n  private static async cacheProducts(query: string, products: UnifiedProduct[]): Promise<void> {\n    try {\n      // This would typically use a Redis cache or similar\n      // For now, we'll just save to database\n      console.log(`Caching ${products.length} products for query: ${query}`)\n    } catch (error) {\n      console.error('Cache storage error:', error)\n    }\n  }\n\n  private static async saveProductsToDatabase(products: UnifiedProduct[]): Promise<void> {\n    try {\n      for (const product of products) {\n        // Find or create product\n        const existingProduct = await prisma.product.findFirst({\n          where: {\n            name: product.name,\n            brand: product.platform\n          }\n        })\n\n        let productId: string\n        if (existingProduct) {\n          productId = existingProduct.id\n        } else {\n          const newProduct = await prisma.product.create({\n            data: {\n              name: product.name,\n              description: `Product from ${product.platform}`,\n              imageUrl: product.image,\n              brand: product.platform,\n              category: 'General'\n            }\n          })\n          productId = newProduct.id\n        }\n\n        // Save price data\n        await prisma.price.create({\n          data: {\n            productId,\n            platform: product.platform,\n            price: product.price,\n            currency: product.currency,\n            url: product.url,\n            inStock: product.inStock\n          }\n        })\n      }\n    } catch (error) {\n      console.error('Database save error:', error)\n    }\n  }\n\n  static async getProductPriceHistory(productId: string): Promise<any[]> {\n    try {\n      const prices = await prisma.price.findMany({\n        where: { productId },\n        orderBy: { createdAt: 'asc' }\n      })\n\n      return prices.map(price => ({\n        date: price.createdAt,\n        price: price.price,\n        platform: price.platform,\n        inStock: price.inStock\n      }))\n    } catch (error) {\n      console.error('Price history error:', error)\n      return []\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 733, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/app/api/products/search/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { z } from 'zod'\nimport { prisma } from '@/lib/prisma'\nimport { ProductService } from '@/lib/product-service'\n\nconst searchSchema = z.object({\n  query: z.string().min(1),\n  limit: z.number().min(1).max(50).default(10),\n  category: z.string().optional(),\n})\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const query = searchParams.get('query') || ''\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const category = searchParams.get('category') || undefined\n\n    const validatedData = searchSchema.parse({\n      query,\n      limit,\n      category,\n    })\n\n    // Use ProductService to search across all platforms\n    const products = await ProductService.searchProducts(validatedData.query)\n\n    // Transform data for frontend\n    const transformedProducts = products.map(product => ({\n      id: product.id,\n      name: product.name,\n      description: `Product from ${product.platform}`,\n      imageUrl: product.image,\n      category: 'General',\n      brand: product.platform,\n      prices: {\n        [product.platform]: {\n          price: product.price,\n          platform: product.platform,\n          url: product.url,\n          inStock: product.inStock,\n          createdAt: new Date()\n        }\n      },\n      bestPrice: {\n        platform: product.platform,\n        price: product.price,\n        savings: 0,\n      },\n      coupons: [],\n    }))\n\n    return NextResponse.json({\n      success: true,\n      data: transformedProducts,\n      total: products.length,\n    })\n  } catch (error) {\n    console.error('Product search error:', error)\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid search parameters', details: error.errors },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // For now, return mock data for demonstration\n    // In production, this would save search queries or track user behavior\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Search query logged',\n    })\n  } catch (error) {\n    console.error('Search logging error:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to log search' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;AAEA,MAAM,eAAe,qNAAC,CAAC,MAAM,CAAC;IAC5B,OAAO,qNAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACtB,OAAO,qNAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,OAAO,CAAC;IACzC,UAAU,qNAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC,YAAY;QAC3C,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;QACpD,MAAM,WAAW,aAAa,GAAG,CAAC,eAAe;QAEjD,MAAM,gBAAgB,aAAa,KAAK,CAAC;YACvC;YACA;YACA;QACF;QAEA,oDAAoD;QACpD,MAAM,WAAW,MAAM,qLAAc,CAAC,cAAc,CAAC,cAAc,KAAK;QAExE,8BAA8B;QAC9B,MAAM,sBAAsB,SAAS,GAAG,CAAC,CAAA,UAAW,CAAC;gBACnD,IAAI,QAAQ,EAAE;gBACd,MAAM,QAAQ,IAAI;gBAClB,aAAa,CAAC,aAAa,EAAE,QAAQ,QAAQ,EAAE;gBAC/C,UAAU,QAAQ,KAAK;gBACvB,UAAU;gBACV,OAAO,QAAQ,QAAQ;gBACvB,QAAQ;oBACN,CAAC,QAAQ,QAAQ,CAAC,EAAE;wBAClB,OAAO,QAAQ,KAAK;wBACpB,UAAU,QAAQ,QAAQ;wBAC1B,KAAK,QAAQ,GAAG;wBAChB,SAAS,QAAQ,OAAO;wBACxB,WAAW,IAAI;oBACjB;gBACF;gBACA,WAAW;oBACT,UAAU,QAAQ,QAAQ;oBAC1B,OAAO,QAAQ,KAAK;oBACpB,SAAS;gBACX;gBACA,SAAS,EAAE;YACb,CAAC;QAED,OAAO,iLAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,OAAO,SAAS,MAAM;QACxB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QAEvC,IAAI,iBAAiB,qNAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,iLAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;gBAA6B,SAAS,MAAM,MAAM;YAAC,GAC5E;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,iLAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,8CAA8C;QAC9C,uEAAuE;QAEvE,OAAO,iLAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,iLAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAuB,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}