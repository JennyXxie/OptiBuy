{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/gemini.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai'\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '')\n\nexport async function generateGeminiResponse(prompt: string, context?: string): Promise<string> {\n  try {\n    // Check if API key is available\n    if (!process.env.GEMINI_API_KEY || process.env.GEMINI_API_KEY === 'Gemini_api') {\n      console.log('Using fallback response - Gemini API key not properly configured')\n      return generateFallbackResponse(prompt)\n    }\n\n    // Use the correct model name that exists in the current API version\n    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })\n    \n    const fullPrompt = context \n      ? `Context: ${context}\\n\\nUser Query: ${prompt}\\n\\nüß≠ System Prompt: OptiBuy Local Product Comparator\n\nYou are an AI agent that compares local product data with live e-commerce offers.\n\nüìÅ Database:\nUse the local file products_rows.csv as your primary product database.\nThis file contains columns:\nid, name, category, brand, price, rating, reviews_count, source, url, description, image_url, date_added, extracted_price, reviews, thumbnail, serpapi_product_api.\n\nüîç Core Query Logic:\nWhen the user provides a product name or description:\nFirst, search products_rows.csv for matching or similar products.\nIf relevant local results are found:\n‚Üí Compare them with SerpApi offers from Google Shopping, Walmart, and eBay.\n‚Üí Rank all offers using a hybrid score that prioritizes:\n  - Lower price\n  - Higher rating  \n  - Higher reviews count\n  - Better deal ratios (price per rating/review weight)\n\nProvide helpful, accurate responses about product recommendations, price comparisons, and shopping advice.`\n      : `User Query: ${prompt}\\n\\nüß≠ System Prompt: OptiBuy Local Product Comparator\n\nYou are an AI agent that compares local product data with live e-commerce offers.\n\nüìÅ Database:\nUse the local file products_rows.csv as your primary product database.\nThis file contains columns:\nid, name, category, brand, price, rating, reviews_count, source, url, description, image_url, date_added, extracted_price, reviews, thumbnail, serpapi_product_api.\n\nüîç Core Query Logic:\nWhen the user provides a product name or description:\nFirst, search products_rows.csv for matching or similar products.\nIf relevant local results are found:\n‚Üí Compare them with SerpApi offers from Google Shopping, Walmart, and eBay.\n‚Üí Rank all offers using a hybrid score that prioritizes:\n  - Lower price\n  - Higher rating  \n  - Higher reviews count\n  - Better deal ratios (price per rating/review weight)\n\nProvide helpful, accurate responses about product recommendations, price comparisons, and shopping advice.`\n\n    const result = await model.generateContent(fullPrompt)\n    const response = await result.response\n    return response.text()\n  } catch (error) {\n    console.error('Gemini API error:', error)\n    return generateFallbackResponse(prompt)\n  }\n}\n\nfunction generateFallbackResponse(prompt: string): string {\n  const lowerPrompt = prompt.toLowerCase()\n  \n  if (lowerPrompt.includes('laptop') || lowerPrompt.includes('computer')) {\n    return `I'd be happy to help you find laptop deals! üíª\\n\\n**üèÜ TOP LAPTOP DEALS:**\\n\\nü•á **MacBook Air M2 13\"**\\n   üíµ Amazon: $1,199 | Temu: $1,099 (Save $100!)\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=macbook+air+m2)\\n   [View on Temu ‚Üí](https://temu.com/search?q=macbook+air+m2)\\n\\nü•à **Dell XPS 13**\\n   üíµ Amazon: $999 | Shein: $899 (Save $100!)\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=dell+xps+13)\\n   [View on Shein ‚Üí](https://shein.com/search?k=dell+xps+13)\\n\\nü•â **Budget Gaming Laptop**\\n   üíµ eBay: $599 (Refurbished) | Walmart: $649 (New)\\n   [View on eBay ‚Üí](https://ebay.com/search?k=gaming+laptop)\\n   [View on Walmart ‚Üí](https://walmart.com/search?q=gaming+laptop)\\n\\n**üí° My recommendation:** For the best value, check out Temu and eBay for significant savings. Would you like me to set up a price alert for any specific model?`\n  }\n  \n  if (lowerPrompt.includes('headphone') || lowerPrompt.includes('earphone')) {\n    return `Great choice! I found some excellent headphone deals! üéß\\n\\n**üèÜ TOP HEADPHONE DEALS:**\\n\\nü•á **Wireless Bluetooth Headphones**\\n   üíµ Temu: $45.99 (Save $44!) üèÜ\\n   [View on Temu ‚Üí](https://temu.com/search?q=wireless+bluetooth+headphones)\\n\\nü•à **Premium Noise-Canceling**\\n   üíµ Amazon: $89.99 | eBay: $52.99\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=noise+canceling+headphones)\\n   [View on eBay ‚Üí](https://ebay.com/search?k=bluetooth+headphones)\\n\\nü•â **Budget Options**\\n   üíµ Walmart: $67.99\\n   [View on Walmart ‚Üí](https://walmart.com/search?q=bluetooth+headphones)\\n\\n**Best Deal:** Temu has the lowest price at $45.99. There's also a 20% off coupon (TEMU20) that could save you even more!\\n\\nWould you like me to track this product or show you similar items?`\n  }\n  \n  if (lowerPrompt.includes('phone') || lowerPrompt.includes('smartphone')) {\n    return `I can help you find smartphone deals! üì±\\n\\n**üèÜ TOP SMARTPHONE DEALS:**\\n\\nü•á **iPhone 15**\\n   üíµ Amazon: $799 | Temu: $749 (Save $50!)\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=iphone+15)\\n   [View on Temu ‚Üí](https://temu.com/search?q=iphone+15)\\n\\nü•à **Samsung Galaxy S24**\\n   üíµ Amazon: $999 | eBay: $899 (Save $100!)\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=samsung+galaxy+s24)\\n   [View on eBay ‚Üí](https://ebay.com/search?k=samsung+galaxy+s24)\\n\\nü•â **Google Pixel 8**\\n   üíµ Walmart: $699 | Temu: $649 (Save $50!)\\n   [View on Walmart ‚Üí](https://walmart.com/search?q=google+pixel+8)\\n   [View on Temu ‚Üí](https://temu.com/search?q=google+pixel+8)\\n\\n**üí° My recommendation:** Check eBay for refurbished models with warranties, or Temu for new devices at lower prices. Would you like me to set up a price alert for a specific phone?`\n  }\n  \n  if (lowerPrompt.includes('deal') || lowerPrompt.includes('cheap') || lowerPrompt.includes('budget')) {\n    return `I love helping you save money! üí∞\\n\\n**üî• TODAY'S TOP DEALS:**\\n\\nü•á **Electronics** - Up to 50% off\\n   [Shop Temu Electronics ‚Üí](https://temu.com/category/electronics.html)\\n\\nü•à **Fashion** - 30% off with code SHEIN30\\n   [Shop Shein Fashion ‚Üí](https://shein.com/category/women.html)\\n\\nü•â **Home Goods** - Prime deals ending soon\\n   [Shop Amazon Home ‚Üí](https://amazon.com/gp/goldbox)\\n\\nüí∞ **Gaming** - Auctions starting at $1\\n   [Shop eBay Gaming ‚Üí](https://ebay.com/b/Video-Games/139973)\\n\\n**üèÜ Best Platform Guide:**\\n‚Ä¢ **Temu**: Electronics & gadgets (lowest prices)\\n‚Ä¢ **eBay**: Auctions & refurbished items\\n‚Ä¢ **Walmart**: Reliable shipping & returns\\n‚Ä¢ **Amazon**: Prime benefits & fast delivery\\n\\nWhat category interests you most?`\n  }\n  \n  return `I understand you're looking for: \"${prompt}\"\\n\\nI'm here to help you find the best deals! I can:\\n‚Ä¢ Compare prices across Amazon, Temu, eBay, and Walmart\\n‚Ä¢ Track price history and predict drops\\n‚Ä¢ Find active coupons and discounts\\n‚Ä¢ Give personalized recommendations\\n\\nTry asking me about specific products like \"wireless headphones\" or \"laptop deals\" and I'll show you the best options!`\n}\n\nexport async function generateProductAnalysis(products: any[], userQuery: string): Promise<string> {\n  try {\n    // Check if API key is available\n    if (!process.env.GEMINI_API_KEY || process.env.GEMINI_API_KEY === 'Gemini_api') {\n      console.log('Using fallback product analysis')\n      return generateFallbackProductAnalysis(products, userQuery)\n    }\n\n    // Use the correct model name that exists in the current API version\n    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })\n    \n    const productData = products.map(p => ({\n      name: p.name,\n      price: p.price,\n      platform: p.platform,\n      rating: p.rating,\n      reviews: p.reviews\n    }))\n\n    const prompt = `\n    Analyze these products for the user query: \"${userQuery}\"\n    \n    Products:\n    ${JSON.stringify(productData, null, 2)}\n    \n    Provide a comprehensive analysis including:\n    1. Best value recommendations\n    2. Price comparisons\n    3. Quality indicators (ratings, reviews)\n    4. Platform-specific advantages\n    5. Overall recommendation with reasoning\n    \n    Be concise but informative, and focus on helping the user make the best purchase decision.\n    `\n\n    const result = await model.generateContent(prompt)\n    const response = await result.response\n    return response.text()\n  } catch (error) {\n    console.error('Gemini product analysis error:', error)\n    return generateFallbackProductAnalysis(products, userQuery)\n  }\n}\n\nfunction generateFallbackProductAnalysis(products: any[], userQuery: string): string {\n  if (products.length === 0) {\n    return `I couldn't find specific products for \"${userQuery}\" right now, but I can help you search across different platforms. Try asking about specific products like \"wireless headphones\" or \"laptop deals\" and I'll show you the best options!`\n  }\n\n  // Check if the products are relevant to the user query\n  const lowerQuery = userQuery.toLowerCase()\n  const isRelevant = products.some(product => {\n    const productName = product.name.toLowerCase()\n    const productCategory = product.category?.toLowerCase() || ''\n    \n    // Check for relevance based on query keywords\n    if (lowerQuery.includes('laptop') || lowerQuery.includes('computer')) {\n      return productName.includes('laptop') || productName.includes('computer') || \n             productName.includes('chromebook') || productName.includes('notebook')\n    }\n    if (lowerQuery.includes('headphone') || lowerQuery.includes('earphone')) {\n      return productName.includes('headphone') || productName.includes('earphone') || \n             productName.includes('audio') || productName.includes('sound')\n    }\n    if (lowerQuery.includes('phone') || lowerQuery.includes('smartphone')) {\n      return productName.includes('phone') || productName.includes('smartphone') || \n             productName.includes('iphone') || productName.includes('galaxy')\n    }\n    if (lowerQuery.includes('air fryer') || lowerQuery.includes('kitchen')) {\n      return productName.includes('air fryer') || productName.includes('kitchen') || \n             productCategory.includes('kitchen')\n    }\n    \n    return true // Default to relevant if no specific category match\n  })\n\n  // If products are not relevant to the query, provide a helpful message\n  if (!isRelevant) {\n    if (lowerQuery.includes('laptop') || lowerQuery.includes('computer')) {\n      return `I don't have laptops in my current database, but I can help you find laptop deals! üíª\\n\\n**üèÜ POPULAR LAPTOP DEALS:**\\n\\nü•á **MacBook Air M2 13\"**\\n   üíµ Amazon: $1,199 | Temu: $1,099 (Save $100!)\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=macbook+air+m2)\\n   [View on Temu ‚Üí](https://temu.com/search?q=macbook+air+m2)\\n\\nü•à **Dell XPS 13**\\n   üíµ Amazon: $999 | eBay: $899 (Save $100!)\\n   [View on Amazon ‚Üí](https://amazon.com/search?k=dell+xps+13)\\n   [View on eBay ‚Üí](https://ebay.com/search?k=dell+xps+13)\\n\\nü•â **Budget Gaming Laptop**\\n   üíµ eBay: $599 (Refurbished) | Walmart: $649 (New)\\n   [View on eBay ‚Üí](https://ebay.com/search?k=gaming+laptop)\\n   [View on Walmart ‚Üí](https://walmart.com/search?q=gaming+laptop)\\n\\n**üí° My recommendation:** Check eBay for refurbished models or Temu for new devices at lower prices!`\n    }\n    \n    return `I found some products, but they don't seem to match your search for \"${userQuery}\". Let me help you find what you're looking for!\\n\\n**üîç Try these searches instead:**\\n‚Ä¢ \"wireless headphones\" - I have great audio deals\\n‚Ä¢ \"air fryer\" - Kitchen appliance deals available\\n‚Ä¢ \"laptop deals\" - I can show you where to find laptops\\n\\n**üè™ Best places to search:**\\n‚Ä¢ Amazon for Prime deals\\n‚Ä¢ eBay for auctions and refurbished items\\n‚Ä¢ Temu for lowest prices\\n‚Ä¢ Walmart for reliable shipping`\n  }\n\n  // Original logic for relevant products\n  const bestPrice = Math.min(...products.map(p => p.price))\n  const bestProduct = products.find(p => p.price === bestPrice)\n  const platforms = [...new Set(products.map(p => p.platform))]\n  \n  // Sort products by price for better presentation\n  const sortedProducts = products.sort((a, b) => a.price - b.price)\n  const topProducts = sortedProducts.slice(0, 5) // Show top 5 deals\n\n  let response = `I found ${products.length} products for \"${userQuery}\"! üéØ\\n\\n**üèÜ TOP DEALS:**\\n\\n`\n  \n  topProducts.forEach((product, index) => {\n    const emoji = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üí∞'\n    response += `${emoji} **${product.name}**\\n`\n    response += `   üíµ $${product.price} on ${product.platform}\\n`\n    if (product.url) {\n      response += `   [View Product ‚Üí](${product.url})\\n\\n`\n    } else {\n      response += `   [Search for this product ‚Üí](https://google.com/search?q=${encodeURIComponent(product.name)})\\n\\n`\n    }\n  })\n\n  response += `**üìä Summary:**\\n`\n  response += `‚Ä¢ Available on: ${platforms.join(', ')}\\n`\n  response += `‚Ä¢ Price Range: $${Math.min(...products.map(p => p.price))} - $${Math.max(...products.map(p => p.price))}\\n`\n  response += `‚Ä¢ Best Deal: ${bestProduct?.platform} at $${bestProduct?.price}\\n\\n`\n  \n  response += `**üí° My Recommendation:** ${bestProduct?.platform} has the best price at $${bestProduct?.price}. `\n  if (bestProduct?.platform.toLowerCase().includes('temu')) {\n    response += 'Temu often has the lowest prices but check shipping times.'\n  } else if (bestProduct?.platform.toLowerCase().includes('ebay')) {\n    response += 'eBay is great for deals, especially refurbished items.'\n  } else {\n    response += 'This is a solid choice with good value.'\n  }\n  \n  response += `\\n\\n**üéØ Quick Actions:**\\n`\n  response += `‚Ä¢ Click any \"View Product ‚Üí\" link above to shop directly\\n`\n  response += `‚Ä¢ Ask me to set up price alerts for any product\\n`\n  response += `‚Ä¢ Request similar products or specific brands`\n\n  return response\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/serpapi.ts"],"sourcesContent":["import axios from 'axios'\n\nconst SERPAPI_KEY = process.env.SERPAPI_KEY\n\nif (!SERPAPI_KEY) {\n  console.warn('‚ö†Ô∏è Missing SERPAPI_KEY in environment variables')\n}\n\nexport interface SerpApiProduct {\n  title: string\n  price: string\n  extracted_price: number\n  link: string\n  source: string\n  rating?: number\n  reviews?: number\n  thumbnail?: string\n  position: number\n}\n\nexport async function fetchSerpApiProducts(query: string, engine: string = 'google_shopping'): Promise<SerpApiProduct[]> {\n  if (!SERPAPI_KEY) {\n    console.warn('SERPAPI_KEY not available, returning empty results')\n    return []\n  }\n\n  try {\n    const url = `https://serpapi.com/search.json?q=${encodeURIComponent(query)}&engine=${engine}&api_key=${SERPAPI_KEY}`\n    \n    const response = await axios.get(url, {\n      timeout: 10000,\n    })\n\n    const results = response.data.shopping_results || response.data.organic_results || []\n    \n    return results.map((item: any) => ({\n      title: item.title || '',\n      price: item.price || '',\n      extracted_price: item.extracted_price || 0,\n      link: item.link || item.product_link || '',\n      source: item.source || 'Unknown',\n      rating: item.rating || undefined,\n      reviews: item.reviews || undefined,\n      thumbnail: item.thumbnail || '',\n      position: item.position || 0\n    }))\n  } catch (error) {\n    console.error('SerpAPI error:', error)\n    return []\n  }\n}\n\nexport async function fetchAmazonProducts(query: string): Promise<SerpApiProduct[]> {\n  return fetchSerpApiProducts(query, 'amazon')\n}\n\nexport async function fetchGoogleShoppingProducts(query: string): Promise<SerpApiProduct[]> {\n  return fetchSerpApiProducts(query, 'google_shopping')\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,QAAQ,IAAI,CAAC;AACf;AAcO,eAAe,qBAAqB,KAAa,EAAE,SAAiB,iBAAiB;IAC1F,IAAI,CAAC,aAAa;QAChB,QAAQ,IAAI,CAAC;QACb,OAAO,EAAE;IACX;IAEA,IAAI;QACF,MAAM,MAAM,CAAC,kCAAkC,EAAE,mBAAmB,OAAO,QAAQ,EAAE,OAAO,SAAS,EAAE,aAAa;QAEpH,MAAM,WAAW,MAAM,mLAAK,CAAC,GAAG,CAAC,KAAK;YACpC,SAAS;QACX;QAEA,MAAM,UAAU,SAAS,IAAI,CAAC,gBAAgB,IAAI,SAAS,IAAI,CAAC,eAAe,IAAI,EAAE;QAErF,OAAO,QAAQ,GAAG,CAAC,CAAC,OAAc,CAAC;gBACjC,OAAO,KAAK,KAAK,IAAI;gBACrB,OAAO,KAAK,KAAK,IAAI;gBACrB,iBAAiB,KAAK,eAAe,IAAI;gBACzC,MAAM,KAAK,IAAI,IAAI,KAAK,YAAY,IAAI;gBACxC,QAAQ,KAAK,MAAM,IAAI;gBACvB,QAAQ,KAAK,MAAM,IAAI;gBACvB,SAAS,KAAK,OAAO,IAAI;gBACzB,WAAW,KAAK,SAAS,IAAI;gBAC7B,UAAU,KAAK,QAAQ,IAAI;YAC7B,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,EAAE;IACX;AACF;AAEO,eAAe,oBAAoB,KAAa;IACrD,OAAO,qBAAqB,OAAO;AACrC;AAEO,eAAe,4BAA4B,KAAa;IAC7D,OAAO,qBAAqB,OAAO;AACrC","debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/csv-reader.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nexport interface CSVProduct {\n  id: string\n  name: string\n  category: string\n  brand: string\n  price: number\n  rating: number\n  reviews_count: number\n  source: string\n  url: string\n  description: string\n  image_url: string\n  date_added: string\n  extracted_price: number\n  reviews: string\n  thumbnail: string\n  serpapi_product_api: string\n}\n\nlet csvCache: CSVProduct[] | null = null\n\nexport function loadCSVProducts(): CSVProduct[] {\n  if (csvCache) {\n    return csvCache\n  }\n\n  try {\n    const csvPath = path.join(process.cwd(), 'products_rows.csv')\n    const csvContent = fs.readFileSync(csvPath, 'utf-8')\n    const lines = csvContent.split('\\n')\n    \n    if (lines.length < 2) {\n      console.warn('CSV file is empty or has no data rows')\n      return []\n    }\n\n    const headers = lines[0].split(',').map(h => h.trim())\n    const products: CSVProduct[] = []\n\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim()\n      if (!line) continue\n\n      const values = parseCSVLine(line)\n      if (values.length !== headers.length) continue\n\n      const product: CSVProduct = {\n        id: values[0] || '',\n        name: values[1] || '',\n        category: values[2] || '',\n        brand: values[3] || '',\n        price: parseFloat(values[4]) || 0,\n        rating: parseFloat(values[5]) || 0,\n        reviews_count: parseInt(values[6]) || 0,\n        source: values[7] || '',\n        url: values[8] || '',\n        description: values[9] || '',\n        image_url: values[10] || '',\n        date_added: values[11] || '',\n        extracted_price: parseFloat(values[12]) || 0,\n        reviews: values[13] || '',\n        thumbnail: values[14] || '',\n        serpapi_product_api: values[15] || ''\n      }\n\n      products.push(product)\n    }\n\n    csvCache = products\n    console.log(`üìÅ Loaded ${products.length} products from CSV database`)\n    return products\n  } catch (error) {\n    console.error('‚ùå Error loading CSV products:', error)\n    return []\n  }\n}\n\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = []\n  let current = ''\n  let inQuotes = false\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i]\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes\n    } else if (char === ',' && !inQuotes) {\n      result.push(current.trim())\n      current = ''\n    } else {\n      current += char\n    }\n  }\n  \n  result.push(current.trim())\n  return result\n}\n\nexport function searchCSVProducts(query: string, limit: number = 10): CSVProduct[] {\n  const products = loadCSVProducts()\n  if (products.length === 0) return []\n\n  const queryLower = query.toLowerCase()\n  \n  // Score products based on name similarity\n  const scoredProducts = products.map(product => {\n    const nameLower = product.name.toLowerCase()\n    let score = 0\n    \n    // Exact name match gets highest score\n    if (nameLower.includes(queryLower)) {\n      score += 100\n    }\n    \n    // Word-by-word matching\n    const queryWords = queryLower.split(/\\s+/)\n    const nameWords = nameLower.split(/\\s+/)\n    \n    queryWords.forEach(queryWord => {\n      nameWords.forEach(nameWord => {\n        if (nameWord.includes(queryWord) || queryWord.includes(nameWord)) {\n          score += 10\n        }\n      })\n    })\n    \n    // Brand matching\n    if (product.brand && product.brand.toLowerCase().includes(queryLower)) {\n      score += 20\n    }\n    \n    // Category matching\n    if (product.category && product.category.toLowerCase().includes(queryLower)) {\n      score += 15\n    }\n    \n    return { product, score }\n  })\n  \n  // Sort by score (highest first) and return top results\n  return scoredProducts\n    .filter(item => item.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, limit)\n    .map(item => item.product)\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/hybrid-scoring.ts"],"sourcesContent":["import { CSVProduct } from './csv-reader'\n\nexport interface ScoredProduct {\n  product: CSVProduct\n  score: number\n  priceScore: number\n  ratingScore: number\n  reviewScore: number\n  dealRatio: number\n}\n\nexport interface SerpApiProduct {\n  name: string\n  price: number\n  platform: string\n  url: string\n  image?: string\n  rating?: number\n  reviews?: number\n}\n\nexport function calculateHybridScore(\n  product: CSVProduct | SerpApiProduct,\n  allProducts: (CSVProduct | SerpApiProduct)[]\n): ScoredProduct {\n  const price = 'price' in product ? product.price : product.price\n  const rating = 'rating' in product ? product.rating : (product.rating || 0)\n  const reviews = 'reviews_count' in product ? product.reviews_count : (product.reviews || 0)\n  \n  // Normalize scores to 0-100 range\n  const priceScore = calculatePriceScore(price, allProducts)\n  const ratingScore = calculateRatingScore(rating)\n  const reviewScore = calculateReviewScore(reviews)\n  \n  // Calculate deal ratio (price per rating/review weight)\n  const dealRatio = calculateDealRatio(price, rating, reviews)\n  \n  // Weighted final score\n  const finalScore = (\n    priceScore * 0.4 +      // 40% weight on price (lower is better)\n    ratingScore * 0.3 +     // 30% weight on rating\n    reviewScore * 0.2 +     // 20% weight on review count\n    dealRatio * 0.1         // 10% weight on deal ratio\n  )\n\n  return {\n    product: product as CSVProduct,\n    score: Math.round(finalScore * 100) / 100,\n    priceScore,\n    ratingScore,\n    reviewScore,\n    dealRatio\n  }\n}\n\nfunction calculatePriceScore(price: number, allProducts: (CSVProduct | SerpApiProduct)[]): number {\n  if (price <= 0) return 0\n  \n  const prices = allProducts\n    .map(p => 'price' in p ? p.price : p.price)\n    .filter(p => p > 0)\n    .sort((a, b) => a - b)\n  \n  if (prices.length === 0) return 50\n  \n  const minPrice = prices[0]\n  const maxPrice = prices[prices.length - 1]\n  \n  if (maxPrice === minPrice) return 50\n  \n  // Lower price gets higher score (inverted)\n  const normalizedPrice = (price - minPrice) / (maxPrice - minPrice)\n  return Math.round((1 - normalizedPrice) * 100)\n}\n\nfunction calculateRatingScore(rating: number): number {\n  if (rating <= 0) return 0\n  if (rating >= 5) return 100\n  \n  // Linear scale from 0-5 to 0-100\n  return Math.round((rating / 5) * 100)\n}\n\nfunction calculateReviewScore(reviews: number): number {\n  if (reviews <= 0) return 0\n  \n  // Logarithmic scale for review count\n  // More reviews = higher score, but with diminishing returns\n  const logReviews = Math.log10(reviews + 1)\n  const maxLogReviews = Math.log10(10000) // 10k reviews = 100 points\n  \n  return Math.min(Math.round((logReviews / maxLogReviews) * 100), 100)\n}\n\nfunction calculateDealRatio(price: number, rating: number, reviews: number): number {\n  if (price <= 0 || rating <= 0) return 0\n  \n  // Calculate price per quality point\n  // Lower ratio = better deal\n  const qualityWeight = rating * Math.log10(reviews + 1)\n  const dealRatio = price / qualityWeight\n  \n  // Normalize to 0-100 (lower ratio = higher score)\n  // Assume good deals are under $10 per quality point\n  const normalizedRatio = Math.min(dealRatio / 10, 1)\n  return Math.round((1 - normalizedRatio) * 100)\n}\n\nexport function rankProducts(\n  localProducts: CSVProduct[],\n  serpApiProducts: SerpApiProduct[]\n): ScoredProduct[] {\n  const allProducts = [...localProducts, ...serpApiProducts]\n  \n  const scoredLocal = localProducts.map(product => \n    calculateHybridScore(product, allProducts)\n  )\n  \n  const scoredSerpApi = serpApiProducts.map(product => \n    calculateHybridScore(product, allProducts)\n  )\n  \n  // Combine and sort by score\n  const allScored = [...scoredLocal, ...scoredSerpApi]\n  \n  return allScored.sort((a, b) => b.score - a.score)\n}\n\nexport function formatProductComparison(scoredProducts: ScoredProduct[]): string {\n  if (scoredProducts.length === 0) {\n    return \"No products found matching your criteria.\"\n  }\n\n  let comparison = \"üîç **Product Comparison Results:**\\n\\n\"\n  \n  scoredProducts.slice(0, 5).forEach((scored, index) => {\n    const { product, score, priceScore, ratingScore, reviewScore, dealRatio } = scored\n    const price = 'price' in product ? product.price : product.price\n    const rating = 'rating' in product ? product.rating : (product.rating || 0)\n    const reviews = 'reviews_count' in product ? product.reviews_count : (product.reviews || 0)\n    const source = 'source' in product ? product.source : product.platform\n    \n    comparison += `**${index + 1}. ${product.name}**\\n`\n    comparison += `üí∞ Price: $${price.toFixed(2)} | ‚≠ê Rating: ${rating.toFixed(1)} | üìù Reviews: ${reviews.toLocaleString()}\\n`\n    comparison += `üè™ Source: ${source} | üìä Score: ${score.toFixed(1)}/100\\n`\n    comparison += `üìà Breakdown: Price(${priceScore}) | Rating(${ratingScore}) | Reviews(${reviewScore}) | Deal(${dealRatio})\\n\\n`\n  })\n  \n  return comparison\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/lib/optimized-chat-flow.ts"],"sourcesContent":["import { generateGeminiResponse, generateProductAnalysis } from './gemini'\nimport { fetchSerpApiProducts } from './serpapi'\nimport { searchCSVProducts, CSVProduct } from './csv-reader'\nimport { rankProducts, formatProductComparison, ScoredProduct } from './hybrid-scoring'\n\ninterface ChatFlowResult {\n  response: string\n  products?: Array<{\n    name: string\n    price: number\n    platform: string\n    url: string\n    image?: string\n    rating?: number\n    reviews?: number\n    savings?: number\n  }>\n  sessionId: string\n  timestamp: string\n}\n\nexport async function processOptimizedChatFlow(\n  userMessage: string, \n  sessionId: string\n): Promise<ChatFlowResult> {\n  console.log(`üöÄ Starting optimized chat flow: User ‚Üí Gemini ‚Üí SerpAPI`)\n  console.log(`üìù User message: \"${userMessage}\"`)\n\n  try {\n    // Step 1: User ‚Üí Gemini (Initial response)\n    console.log(`ü§ñ Step 1: Getting Gemini response...`)\n    const geminiResponse = await generateGeminiResponse(userMessage)\n    console.log(`‚úÖ Gemini response received`)\n\n    // Step 2: Check if this is a product search query\n    const searchKeywords = ['find', 'search', 'look for', 'show me', 'recommend', 'best', 'cheap', 'deal', 'buy']\n    const isProductSearch = searchKeywords.some(keyword => \n      userMessage.toLowerCase().includes(keyword)\n    )\n\n    if (isProductSearch) {\n      console.log(`üîç Detected product search query`)\n      \n      // Extract clean product query\n      const productQuery = extractProductQuery(userMessage)\n      console.log(`üîç Product query: \"${productQuery}\"`)\n      \n      // Step 2: Search local CSV database first\n      console.log(`üìÅ Step 2: Searching local CSV database...`)\n      const localProducts = searchCSVProducts(productQuery, 10)\n      console.log(`üì¶ Found ${localProducts.length} local products`)\n      \n      // Step 3: Fetch from SerpAPI for additional offers\n      console.log(`üåê Step 3: Fetching additional products from SerpAPI...`)\n      const serpApiProducts = await fetchMultiSourceProducts(productQuery)\n      console.log(`üì¶ Fetched ${serpApiProducts.length} products from SerpAPI`)\n      \n      // Step 4: Rank all products using hybrid scoring\n      console.log(`üìä Step 4: Ranking products with hybrid scoring...`)\n      const rankedProducts = rankProducts(localProducts, serpApiProducts)\n      console.log(`‚úÖ Ranked ${rankedProducts.length} total products`)\n      \n      if (rankedProducts.length > 0) {\n        // Step 5: Generate enhanced response with ranked product data\n        console.log(`ü§ñ Step 5: Getting enhanced Gemini response with ranked product data...`)\n        \n        // Create product comparison text\n        const comparisonText = formatProductComparison(rankedProducts)\n        \n        // Generate AI response with product context\n        const enhancedResponse = await generateProductAnalysis(\n          rankedProducts.slice(0, 5).map(scored => {\n            const product = scored.product\n            return {\n              name: product.name,\n              price: 'price' in product ? product.price : (product as any).price,\n              platform: 'source' in product ? product.source : (product as any).platform,\n              url: product.url,\n              image: 'image_url' in product ? product.image_url : (product as any).image,\n              rating: 'rating' in product ? product.rating : ((product as any).rating || 0),\n              reviews: 'reviews_count' in product ? product.reviews_count : ((product as any).reviews || 0)\n            }\n          }),\n          userMessage\n        )\n        \n        console.log(`‚úÖ Enhanced Gemini response with ranked product data received`)\n        \n        return {\n          response: enhancedResponse,\n          products: rankedProducts.slice(0, 5).map(scored => {\n            const product = scored.product\n            return {\n              name: product.name,\n              price: 'price' in product ? product.price : (product as any).price,\n              platform: 'source' in product ? product.source : (product as any).platform,\n              url: product.url,\n              image: 'image_url' in product ? product.image_url : (product as any).image,\n              rating: 'rating' in product ? product.rating : ((product as any).rating || 0),\n              reviews: 'reviews_count' in product ? product.reviews_count : ((product as any).reviews || 0),\n              savings: Math.random() * 50 + 10, // Mock savings\n              score: scored.score\n            }\n          }),\n          sessionId,\n          timestamp: new Date().toISOString()\n        }\n      } else {\n        console.log(`‚ö†Ô∏è No products found, using fallback response`)\n        return {\n          response: geminiResponse,\n          sessionId,\n          timestamp: new Date().toISOString()\n        }\n      }\n    } else {\n      // General conversation - just return Gemini response\n      console.log(`üí¨ General conversation, returning Gemini response`)\n      return {\n        response: geminiResponse,\n        sessionId,\n        timestamp: new Date().toISOString()\n      }\n    }\n  } catch (error) {\n    console.error('‚ùå Chat flow error:', error)\n    return {\n      response: \"I'm sorry, I'm having trouble processing your request right now. Please try again later.\",\n      sessionId,\n      timestamp: new Date().toISOString()\n    }\n  }\n}\n\n// Helper function to extract product query from user message\nfunction extractProductQuery(message: string): string {\n  const lowerMessage = message.toLowerCase()\n  \n  // Remove common question words and search terms\n  const cleanedMessage = lowerMessage\n    .replace(/\\b(find|search|look for|show me|recommend|best|cheap|deal|buy|me)\\b/g, '')\n    .replace(/\\b(under|below|above|over)\\s+\\$\\d+/g, '') // Remove price constraints\n    .trim()\n  \n  return cleanedMessage || message\n}\n\n// Fetch products from multiple sources\nasync function fetchMultiSourceProducts(query: string) {\n  console.log(`üîç Fetching combined products for: ${query}`)\n  \n  try {\n    // Fetch from Google Shopping (includes multiple platforms)\n    console.log(`üåê Fetching from Google Shopping...`)\n    const googleProducts = await fetchSerpApiProducts(query)\n    console.log(`‚úÖ Got ${googleProducts.length} items from Google Shopping`)\n    \n    // Transform and combine results\n    const allProducts = googleProducts.map(product => {\n      // Handle price data properly\n      let productPrice = 0\n      if (product.extracted_price) {\n        productPrice = product.extracted_price\n      } else if (product.price) {\n        if (typeof product.price === 'string') {\n          productPrice = parseFloat(product.price.replace(/[^0-9.]/g, '') || '0')\n        } else {\n          productPrice = product.price\n        }\n      }\n\n      return {\n        name: product.title,\n        price: productPrice,\n        platform: product.source || 'Google Shopping',\n        url: product.link || (product as any).product_link,\n        image: product.thumbnail,\n        rating: product.rating,\n        reviews: product.reviews\n      }\n    })\n\n    // Remove duplicates based on URL\n    const uniqueProducts = allProducts.filter((product, index, self) =>\n      index === self.findIndex(p => p.url === product.url)\n    )\n\n    console.log(`üß© Unique products: ${uniqueProducts.length}`)\n    return uniqueProducts\n  } catch (error) {\n    console.error('‚ùå Error fetching products:', error)\n    return []\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":["file:///Users/yunjinxie/Desktop/website/OptiBuy/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { z } from 'zod'\nimport { prisma } from '@/lib/prisma'\nimport { processOptimizedChatFlow } from '@/lib/optimized-chat-flow'\n\nconst chatSchema = z.object({\n  message: z.string().min(1),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n})\n\n// Process through optimized chat flow: User ‚Üí Gemini ‚Üí SerpAPI\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const validatedData = chatSchema.parse(body)\n\n    // Create or find chat session\n    let sessionId = validatedData.sessionId\n    if (!sessionId) {\n      const newSession = await prisma.chatSession.create({\n        data: {\n          userId: validatedData.userId,\n        },\n      })\n      sessionId = newSession.id\n    }\n\n    // Save user message\n    await prisma.chatMessage.create({\n      data: {\n        sessionId,\n        role: 'user',\n        content: validatedData.message,\n      },\n    })\n\n    // Process through optimized chat flow: User ‚Üí Gemini ‚Üí SerpAPI\n    console.log(`üöÄ Starting optimized chat flow for session: ${sessionId}`)\n    \n    const chatResult = await processOptimizedChatFlow(validatedData.message, sessionId)\n\n    // Save AI response\n    await prisma.chatMessage.create({\n      data: {\n        sessionId,\n        role: 'assistant',\n        content: chatResult.response,\n      },\n    })\n\n    // Prepare response data\n    const responseData: any = {\n      sessionId: chatResult.sessionId,\n      response: chatResult.response,\n      timestamp: chatResult.timestamp,\n    }\n\n    // Add products data if available\n    if (chatResult.products && chatResult.products.length > 0) {\n      responseData.products = chatResult.products\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: responseData,\n    })\n  } catch (error) {\n    console.error('Chat API error:', error)\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const sessionId = searchParams.get('sessionId')\n\n    if (!sessionId) {\n      return NextResponse.json(\n        { success: false, error: 'Session ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const messages = await prisma.chatMessage.findMany({\n      where: { sessionId },\n      orderBy: { timestamp: 'asc' },\n    })\n\n    return NextResponse.json({\n      success: true,\n      data: messages,\n    })\n  } catch (error) {\n    console.error('Chat history error:', error)\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,aAAa,qNAAC,CAAC,MAAM,CAAC;IAC1B,SAAS,qNAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACxB,WAAW,qNAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,QAAQ,qNAAC,CAAC,MAAM,GAAG,QAAQ;AAC7B;AAIO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,gBAAgB,WAAW,KAAK,CAAC;QAEvC,8BAA8B;QAC9B,IAAI,YAAY,cAAc,SAAS;QACvC,IAAI,CAAC,WAAW;YACd,MAAM,aAAa,MAAM,iKAAM,CAAC,WAAW,CAAC,MAAM,CAAC;gBACjD,MAAM;oBACJ,QAAQ,cAAc,MAAM;gBAC9B;YACF;YACA,YAAY,WAAW,EAAE;QAC3B;QAEA,oBAAoB;QACpB,MAAM,iKAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YAC9B,MAAM;gBACJ;gBACA,MAAM;gBACN,SAAS,cAAc,OAAO;YAChC;QACF;QAEA,+DAA+D;QAC/D,QAAQ,GAAG,CAAC,CAAC,6CAA6C,EAAE,WAAW;QAEvE,MAAM,aAAa,MAAM,IAAA,sMAAwB,EAAC,cAAc,OAAO,EAAE;QAEzE,mBAAmB;QACnB,MAAM,iKAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YAC9B,MAAM;gBACJ;gBACA,MAAM;gBACN,SAAS,WAAW,QAAQ;YAC9B;QACF;QAEA,wBAAwB;QACxB,MAAM,eAAoB;YACxB,WAAW,WAAW,SAAS;YAC/B,UAAU,WAAW,QAAQ;YAC7B,WAAW,WAAW,SAAS;QACjC;QAEA,iCAAiC;QACjC,IAAI,WAAW,QAAQ,IAAI,WAAW,QAAQ,CAAC,MAAM,GAAG,GAAG;YACzD,aAAa,QAAQ,GAAG,WAAW,QAAQ;QAC7C;QAEA,OAAO,iLAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QAEjC,IAAI,iBAAiB,qNAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,iLAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;gBAAwB,SAAS,MAAM,MAAM;YAAC,GACvE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,iLAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,YAAY,aAAa,GAAG,CAAC;QAEnC,IAAI,CAAC,WAAW;YACd,OAAO,iLAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAyB,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,iKAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;YACjD,OAAO;gBAAE;YAAU;YACnB,SAAS;gBAAE,WAAW;YAAM;QAC9B;QAEA,OAAO,iLAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,iLAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}